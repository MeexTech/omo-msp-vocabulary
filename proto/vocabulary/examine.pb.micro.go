// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/vocabulary/examine.proto

package vocabulary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ExamineService service

type ExamineService interface {
	AddOne(ctx context.Context, in *ReqExamineAdd, opts ...client.CallOption) (*ReplyExamineInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyExamineInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, opts ...client.CallOption) (*ReplyExamineInfo, error)
	GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyExamineList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
}

type examineService struct {
	c    client.Client
	name string
}

func NewExamineService(name string, c client.Client) ExamineService {
	return &examineService{
		c:    c,
		name: name,
	}
}

func (c *examineService) AddOne(ctx context.Context, in *ReqExamineAdd, opts ...client.CallOption) (*ReplyExamineInfo, error) {
	req := c.c.NewRequest(c.name, "ExamineService.AddOne", in)
	out := new(ReplyExamineInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examineService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyExamineInfo, error) {
	req := c.c.NewRequest(c.name, "ExamineService.GetOne", in)
	out := new(ReplyExamineInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examineService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ExamineService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examineService) UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, opts ...client.CallOption) (*ReplyExamineInfo, error) {
	req := c.c.NewRequest(c.name, "ExamineService.UpdateByFilter", in)
	out := new(ReplyExamineInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examineService) GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyExamineList, error) {
	req := c.c.NewRequest(c.name, "ExamineService.GetListByFilter", in)
	out := new(ReplyExamineList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examineService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "ExamineService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExamineService service

type ExamineServiceHandler interface {
	AddOne(context.Context, *ReqExamineAdd, *ReplyExamineInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyExamineInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	UpdateByFilter(context.Context, *ReqUpdateFilter, *ReplyExamineInfo) error
	GetListByFilter(context.Context, *RequestFilter, *ReplyExamineList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
}

func RegisterExamineServiceHandler(s server.Server, hdlr ExamineServiceHandler, opts ...server.HandlerOption) error {
	type examineService interface {
		AddOne(ctx context.Context, in *ReqExamineAdd, out *ReplyExamineInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyExamineInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, out *ReplyExamineInfo) error
		GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyExamineList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
	}
	type ExamineService struct {
		examineService
	}
	h := &examineServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ExamineService{h}, opts...))
}

type examineServiceHandler struct {
	ExamineServiceHandler
}

func (h *examineServiceHandler) AddOne(ctx context.Context, in *ReqExamineAdd, out *ReplyExamineInfo) error {
	return h.ExamineServiceHandler.AddOne(ctx, in, out)
}

func (h *examineServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyExamineInfo) error {
	return h.ExamineServiceHandler.GetOne(ctx, in, out)
}

func (h *examineServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.ExamineServiceHandler.RemoveOne(ctx, in, out)
}

func (h *examineServiceHandler) UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, out *ReplyExamineInfo) error {
	return h.ExamineServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *examineServiceHandler) GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyExamineList) error {
	return h.ExamineServiceHandler.GetListByFilter(ctx, in, out)
}

func (h *examineServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.ExamineServiceHandler.GetStatistic(ctx, in, out)
}
