// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/vocabulary/graph.proto

package vocabulary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GraphService service

func NewGraphServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GraphService service

type GraphService interface {
	AddNode(ctx context.Context, in *ReqNodeAdd, opts ...client.CallOption) (*ReplyNodeInfo, error)
	AddLink(ctx context.Context, in *ReqLinkAdd, opts ...client.CallOption) (*ReplyLinkInfo, error)
	RemoveNode(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveLink(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	FindPath(ctx context.Context, in *ReqGraphPath, opts ...client.CallOption) (*ReplyGraphInfo, error)
	FindGraph(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyGraphInfo, error)
}

type graphService struct {
	c    client.Client
	name string
}

func NewGraphService(name string, c client.Client) GraphService {
	return &graphService{
		c:    c,
		name: name,
	}
}

func (c *graphService) AddNode(ctx context.Context, in *ReqNodeAdd, opts ...client.CallOption) (*ReplyNodeInfo, error) {
	req := c.c.NewRequest(c.name, "GraphService.AddNode", in)
	out := new(ReplyNodeInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) AddLink(ctx context.Context, in *ReqLinkAdd, opts ...client.CallOption) (*ReplyLinkInfo, error) {
	req := c.c.NewRequest(c.name, "GraphService.AddLink", in)
	out := new(ReplyLinkInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) RemoveNode(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "GraphService.RemoveNode", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) RemoveLink(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "GraphService.RemoveLink", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) FindPath(ctx context.Context, in *ReqGraphPath, opts ...client.CallOption) (*ReplyGraphInfo, error) {
	req := c.c.NewRequest(c.name, "GraphService.FindPath", in)
	out := new(ReplyGraphInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) FindGraph(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyGraphInfo, error) {
	req := c.c.NewRequest(c.name, "GraphService.FindGraph", in)
	out := new(ReplyGraphInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GraphService service

type GraphServiceHandler interface {
	AddNode(context.Context, *ReqNodeAdd, *ReplyNodeInfo) error
	AddLink(context.Context, *ReqLinkAdd, *ReplyLinkInfo) error
	RemoveNode(context.Context, *RequestInfo, *ReplyInfo) error
	RemoveLink(context.Context, *RequestInfo, *ReplyInfo) error
	FindPath(context.Context, *ReqGraphPath, *ReplyGraphInfo) error
	FindGraph(context.Context, *RequestInfo, *ReplyGraphInfo) error
}

func RegisterGraphServiceHandler(s server.Server, hdlr GraphServiceHandler, opts ...server.HandlerOption) error {
	type graphService interface {
		AddNode(ctx context.Context, in *ReqNodeAdd, out *ReplyNodeInfo) error
		AddLink(ctx context.Context, in *ReqLinkAdd, out *ReplyLinkInfo) error
		RemoveNode(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		RemoveLink(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		FindPath(ctx context.Context, in *ReqGraphPath, out *ReplyGraphInfo) error
		FindGraph(ctx context.Context, in *RequestInfo, out *ReplyGraphInfo) error
	}
	type GraphService struct {
		graphService
	}
	h := &graphServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GraphService{h}, opts...))
}

type graphServiceHandler struct {
	GraphServiceHandler
}

func (h *graphServiceHandler) AddNode(ctx context.Context, in *ReqNodeAdd, out *ReplyNodeInfo) error {
	return h.GraphServiceHandler.AddNode(ctx, in, out)
}

func (h *graphServiceHandler) AddLink(ctx context.Context, in *ReqLinkAdd, out *ReplyLinkInfo) error {
	return h.GraphServiceHandler.AddLink(ctx, in, out)
}

func (h *graphServiceHandler) RemoveNode(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.GraphServiceHandler.RemoveNode(ctx, in, out)
}

func (h *graphServiceHandler) RemoveLink(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.GraphServiceHandler.RemoveLink(ctx, in, out)
}

func (h *graphServiceHandler) FindPath(ctx context.Context, in *ReqGraphPath, out *ReplyGraphInfo) error {
	return h.GraphServiceHandler.FindPath(ctx, in, out)
}

func (h *graphServiceHandler) FindGraph(ctx context.Context, in *RequestInfo, out *ReplyGraphInfo) error {
	return h.GraphServiceHandler.FindGraph(ctx, in, out)
}
