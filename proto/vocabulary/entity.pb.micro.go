// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/vocabulary/entity.proto

package vocabulary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for EntityService service

func NewEntityServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EntityService service

type EntityService interface {
	AddOne(ctx context.Context, in *ReqEntityAdd, opts ...client.CallOption) (*ReplyEntityInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyEntityInfo, error)
	GetByName(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyEntityInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetAllByOwner(ctx context.Context, in *ReqEntityBy, opts ...client.CallOption) (*ReplyEntityAll, error)
	UpdateBase(ctx context.Context, in *ReqEntityBase, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateStatus(ctx context.Context, in *ReqEntityStatus, opts ...client.CallOption) (*ReplyEntityStatus, error)
	UpdateCover(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateTags(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyEntityUpdate, error)
	UpdateSynonyms(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyEntityUpdate, error)
	AppendProperty(ctx context.Context, in *ReqEntityProperty, opts ...client.CallOption) (*ReplyEntityProperties, error)
	SubtractProperty(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyEntityProperties, error)
	UpdateProperties(ctx context.Context, in *ReqEntityProperties, opts ...client.CallOption) (*ReplyEntityProperties, error)
	SearchPublic(ctx context.Context, in *ReqEntitySearch, opts ...client.CallOption) (*ReplyEntityAll, error)
}

type entityService struct {
	c    client.Client
	name string
}

func NewEntityService(name string, c client.Client) EntityService {
	return &entityService{
		c:    c,
		name: name,
	}
}

func (c *entityService) AddOne(ctx context.Context, in *ReqEntityAdd, opts ...client.CallOption) (*ReplyEntityInfo, error) {
	req := c.c.NewRequest(c.name, "EntityService.AddOne", in)
	out := new(ReplyEntityInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyEntityInfo, error) {
	req := c.c.NewRequest(c.name, "EntityService.GetOne", in)
	out := new(ReplyEntityInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) GetByName(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyEntityInfo, error) {
	req := c.c.NewRequest(c.name, "EntityService.GetByName", in)
	out := new(ReplyEntityInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "EntityService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) GetAllByOwner(ctx context.Context, in *ReqEntityBy, opts ...client.CallOption) (*ReplyEntityAll, error) {
	req := c.c.NewRequest(c.name, "EntityService.GetAllByOwner", in)
	out := new(ReplyEntityAll)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) UpdateBase(ctx context.Context, in *ReqEntityBase, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "EntityService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) UpdateStatus(ctx context.Context, in *ReqEntityStatus, opts ...client.CallOption) (*ReplyEntityStatus, error) {
	req := c.c.NewRequest(c.name, "EntityService.UpdateStatus", in)
	out := new(ReplyEntityStatus)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) UpdateCover(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "EntityService.UpdateCover", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) UpdateTags(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyEntityUpdate, error) {
	req := c.c.NewRequest(c.name, "EntityService.UpdateTags", in)
	out := new(ReplyEntityUpdate)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) UpdateSynonyms(ctx context.Context, in *RequestList, opts ...client.CallOption) (*ReplyEntityUpdate, error) {
	req := c.c.NewRequest(c.name, "EntityService.UpdateSynonyms", in)
	out := new(ReplyEntityUpdate)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) AppendProperty(ctx context.Context, in *ReqEntityProperty, opts ...client.CallOption) (*ReplyEntityProperties, error) {
	req := c.c.NewRequest(c.name, "EntityService.AppendProperty", in)
	out := new(ReplyEntityProperties)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) SubtractProperty(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyEntityProperties, error) {
	req := c.c.NewRequest(c.name, "EntityService.SubtractProperty", in)
	out := new(ReplyEntityProperties)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) UpdateProperties(ctx context.Context, in *ReqEntityProperties, opts ...client.CallOption) (*ReplyEntityProperties, error) {
	req := c.c.NewRequest(c.name, "EntityService.UpdateProperties", in)
	out := new(ReplyEntityProperties)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) SearchPublic(ctx context.Context, in *ReqEntitySearch, opts ...client.CallOption) (*ReplyEntityAll, error) {
	req := c.c.NewRequest(c.name, "EntityService.SearchPublic", in)
	out := new(ReplyEntityAll)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EntityService service

type EntityServiceHandler interface {
	AddOne(context.Context, *ReqEntityAdd, *ReplyEntityInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyEntityInfo) error
	GetByName(context.Context, *RequestInfo, *ReplyEntityInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetAllByOwner(context.Context, *ReqEntityBy, *ReplyEntityAll) error
	UpdateBase(context.Context, *ReqEntityBase, *ReplyInfo) error
	UpdateStatus(context.Context, *ReqEntityStatus, *ReplyEntityStatus) error
	UpdateCover(context.Context, *RequestInfo, *ReplyInfo) error
	UpdateTags(context.Context, *RequestList, *ReplyEntityUpdate) error
	UpdateSynonyms(context.Context, *RequestList, *ReplyEntityUpdate) error
	AppendProperty(context.Context, *ReqEntityProperty, *ReplyEntityProperties) error
	SubtractProperty(context.Context, *RequestInfo, *ReplyEntityProperties) error
	UpdateProperties(context.Context, *ReqEntityProperties, *ReplyEntityProperties) error
	SearchPublic(context.Context, *ReqEntitySearch, *ReplyEntityAll) error
}

func RegisterEntityServiceHandler(s server.Server, hdlr EntityServiceHandler, opts ...server.HandlerOption) error {
	type entityService interface {
		AddOne(ctx context.Context, in *ReqEntityAdd, out *ReplyEntityInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyEntityInfo) error
		GetByName(ctx context.Context, in *RequestInfo, out *ReplyEntityInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetAllByOwner(ctx context.Context, in *ReqEntityBy, out *ReplyEntityAll) error
		UpdateBase(ctx context.Context, in *ReqEntityBase, out *ReplyInfo) error
		UpdateStatus(ctx context.Context, in *ReqEntityStatus, out *ReplyEntityStatus) error
		UpdateCover(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		UpdateTags(ctx context.Context, in *RequestList, out *ReplyEntityUpdate) error
		UpdateSynonyms(ctx context.Context, in *RequestList, out *ReplyEntityUpdate) error
		AppendProperty(ctx context.Context, in *ReqEntityProperty, out *ReplyEntityProperties) error
		SubtractProperty(ctx context.Context, in *RequestInfo, out *ReplyEntityProperties) error
		UpdateProperties(ctx context.Context, in *ReqEntityProperties, out *ReplyEntityProperties) error
		SearchPublic(ctx context.Context, in *ReqEntitySearch, out *ReplyEntityAll) error
	}
	type EntityService struct {
		entityService
	}
	h := &entityServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EntityService{h}, opts...))
}

type entityServiceHandler struct {
	EntityServiceHandler
}

func (h *entityServiceHandler) AddOne(ctx context.Context, in *ReqEntityAdd, out *ReplyEntityInfo) error {
	return h.EntityServiceHandler.AddOne(ctx, in, out)
}

func (h *entityServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyEntityInfo) error {
	return h.EntityServiceHandler.GetOne(ctx, in, out)
}

func (h *entityServiceHandler) GetByName(ctx context.Context, in *RequestInfo, out *ReplyEntityInfo) error {
	return h.EntityServiceHandler.GetByName(ctx, in, out)
}

func (h *entityServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.EntityServiceHandler.RemoveOne(ctx, in, out)
}

func (h *entityServiceHandler) GetAllByOwner(ctx context.Context, in *ReqEntityBy, out *ReplyEntityAll) error {
	return h.EntityServiceHandler.GetAllByOwner(ctx, in, out)
}

func (h *entityServiceHandler) UpdateBase(ctx context.Context, in *ReqEntityBase, out *ReplyInfo) error {
	return h.EntityServiceHandler.UpdateBase(ctx, in, out)
}

func (h *entityServiceHandler) UpdateStatus(ctx context.Context, in *ReqEntityStatus, out *ReplyEntityStatus) error {
	return h.EntityServiceHandler.UpdateStatus(ctx, in, out)
}

func (h *entityServiceHandler) UpdateCover(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.EntityServiceHandler.UpdateCover(ctx, in, out)
}

func (h *entityServiceHandler) UpdateTags(ctx context.Context, in *RequestList, out *ReplyEntityUpdate) error {
	return h.EntityServiceHandler.UpdateTags(ctx, in, out)
}

func (h *entityServiceHandler) UpdateSynonyms(ctx context.Context, in *RequestList, out *ReplyEntityUpdate) error {
	return h.EntityServiceHandler.UpdateSynonyms(ctx, in, out)
}

func (h *entityServiceHandler) AppendProperty(ctx context.Context, in *ReqEntityProperty, out *ReplyEntityProperties) error {
	return h.EntityServiceHandler.AppendProperty(ctx, in, out)
}

func (h *entityServiceHandler) SubtractProperty(ctx context.Context, in *RequestInfo, out *ReplyEntityProperties) error {
	return h.EntityServiceHandler.SubtractProperty(ctx, in, out)
}

func (h *entityServiceHandler) UpdateProperties(ctx context.Context, in *ReqEntityProperties, out *ReplyEntityProperties) error {
	return h.EntityServiceHandler.UpdateProperties(ctx, in, out)
}

func (h *entityServiceHandler) SearchPublic(ctx context.Context, in *ReqEntitySearch, out *ReplyEntityAll) error {
	return h.EntityServiceHandler.SearchPublic(ctx, in, out)
}
