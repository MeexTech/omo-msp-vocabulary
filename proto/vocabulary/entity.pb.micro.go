// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/vocabulary/entity.proto

package vocabulary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for EntityService service

func NewEntityServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EntityService service

type EntityService interface {
	AddOne(ctx context.Context, in *ReqEntityAdd, opts ...client.CallOption) (*ReplyEntityOne, error)
	GetOne(ctx context.Context, in *ReqEntity, opts ...client.CallOption) (*ReplyEntityOne, error)
	RemoveOne(ctx context.Context, in *ReqEntity, opts ...client.CallOption) (*ReplyEntityRemove, error)
	GetListByOwner(ctx context.Context, in *ReqEntityBy, opts ...client.CallOption) (*ReplyEntityList, error)
	UpdateEvents(ctx context.Context, in *ReqEntityEvents, opts ...client.CallOption) (*ReplyEntityUpdate, error)
	UpdateProperties(ctx context.Context, in *ReqEntityProperties, opts ...client.CallOption) (*ReplyEntityUpdate, error)
	AppendAsset(ctx context.Context, in *ReqEntityAsset, opts ...client.CallOption) (*ReplyEntityAsset, error)
	UnAppendAsset(ctx context.Context, in *ReqEntityAsset, opts ...client.CallOption) (*ReplyEntityAsset, error)
}

type entityService struct {
	c    client.Client
	name string
}

func NewEntityService(name string, c client.Client) EntityService {
	return &entityService{
		c:    c,
		name: name,
	}
}

func (c *entityService) AddOne(ctx context.Context, in *ReqEntityAdd, opts ...client.CallOption) (*ReplyEntityOne, error) {
	req := c.c.NewRequest(c.name, "EntityService.AddOne", in)
	out := new(ReplyEntityOne)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) GetOne(ctx context.Context, in *ReqEntity, opts ...client.CallOption) (*ReplyEntityOne, error) {
	req := c.c.NewRequest(c.name, "EntityService.GetOne", in)
	out := new(ReplyEntityOne)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) RemoveOne(ctx context.Context, in *ReqEntity, opts ...client.CallOption) (*ReplyEntityRemove, error) {
	req := c.c.NewRequest(c.name, "EntityService.RemoveOne", in)
	out := new(ReplyEntityRemove)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) GetListByOwner(ctx context.Context, in *ReqEntityBy, opts ...client.CallOption) (*ReplyEntityList, error) {
	req := c.c.NewRequest(c.name, "EntityService.GetListByOwner", in)
	out := new(ReplyEntityList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) UpdateEvents(ctx context.Context, in *ReqEntityEvents, opts ...client.CallOption) (*ReplyEntityUpdate, error) {
	req := c.c.NewRequest(c.name, "EntityService.UpdateEvents", in)
	out := new(ReplyEntityUpdate)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) UpdateProperties(ctx context.Context, in *ReqEntityProperties, opts ...client.CallOption) (*ReplyEntityUpdate, error) {
	req := c.c.NewRequest(c.name, "EntityService.UpdateProperties", in)
	out := new(ReplyEntityUpdate)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) AppendAsset(ctx context.Context, in *ReqEntityAsset, opts ...client.CallOption) (*ReplyEntityAsset, error) {
	req := c.c.NewRequest(c.name, "EntityService.AppendAsset", in)
	out := new(ReplyEntityAsset)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) UnAppendAsset(ctx context.Context, in *ReqEntityAsset, opts ...client.CallOption) (*ReplyEntityAsset, error) {
	req := c.c.NewRequest(c.name, "EntityService.UnAppendAsset", in)
	out := new(ReplyEntityAsset)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EntityService service

type EntityServiceHandler interface {
	AddOne(context.Context, *ReqEntityAdd, *ReplyEntityOne) error
	GetOne(context.Context, *ReqEntity, *ReplyEntityOne) error
	RemoveOne(context.Context, *ReqEntity, *ReplyEntityRemove) error
	GetListByOwner(context.Context, *ReqEntityBy, *ReplyEntityList) error
	UpdateEvents(context.Context, *ReqEntityEvents, *ReplyEntityUpdate) error
	UpdateProperties(context.Context, *ReqEntityProperties, *ReplyEntityUpdate) error
	AppendAsset(context.Context, *ReqEntityAsset, *ReplyEntityAsset) error
	UnAppendAsset(context.Context, *ReqEntityAsset, *ReplyEntityAsset) error
}

func RegisterEntityServiceHandler(s server.Server, hdlr EntityServiceHandler, opts ...server.HandlerOption) error {
	type entityService interface {
		AddOne(ctx context.Context, in *ReqEntityAdd, out *ReplyEntityOne) error
		GetOne(ctx context.Context, in *ReqEntity, out *ReplyEntityOne) error
		RemoveOne(ctx context.Context, in *ReqEntity, out *ReplyEntityRemove) error
		GetListByOwner(ctx context.Context, in *ReqEntityBy, out *ReplyEntityList) error
		UpdateEvents(ctx context.Context, in *ReqEntityEvents, out *ReplyEntityUpdate) error
		UpdateProperties(ctx context.Context, in *ReqEntityProperties, out *ReplyEntityUpdate) error
		AppendAsset(ctx context.Context, in *ReqEntityAsset, out *ReplyEntityAsset) error
		UnAppendAsset(ctx context.Context, in *ReqEntityAsset, out *ReplyEntityAsset) error
	}
	type EntityService struct {
		entityService
	}
	h := &entityServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EntityService{h}, opts...))
}

type entityServiceHandler struct {
	EntityServiceHandler
}

func (h *entityServiceHandler) AddOne(ctx context.Context, in *ReqEntityAdd, out *ReplyEntityOne) error {
	return h.EntityServiceHandler.AddOne(ctx, in, out)
}

func (h *entityServiceHandler) GetOne(ctx context.Context, in *ReqEntity, out *ReplyEntityOne) error {
	return h.EntityServiceHandler.GetOne(ctx, in, out)
}

func (h *entityServiceHandler) RemoveOne(ctx context.Context, in *ReqEntity, out *ReplyEntityRemove) error {
	return h.EntityServiceHandler.RemoveOne(ctx, in, out)
}

func (h *entityServiceHandler) GetListByOwner(ctx context.Context, in *ReqEntityBy, out *ReplyEntityList) error {
	return h.EntityServiceHandler.GetListByOwner(ctx, in, out)
}

func (h *entityServiceHandler) UpdateEvents(ctx context.Context, in *ReqEntityEvents, out *ReplyEntityUpdate) error {
	return h.EntityServiceHandler.UpdateEvents(ctx, in, out)
}

func (h *entityServiceHandler) UpdateProperties(ctx context.Context, in *ReqEntityProperties, out *ReplyEntityUpdate) error {
	return h.EntityServiceHandler.UpdateProperties(ctx, in, out)
}

func (h *entityServiceHandler) AppendAsset(ctx context.Context, in *ReqEntityAsset, out *ReplyEntityAsset) error {
	return h.EntityServiceHandler.AppendAsset(ctx, in, out)
}

func (h *entityServiceHandler) UnAppendAsset(ctx context.Context, in *ReqEntityAsset, out *ReplyEntityAsset) error {
	return h.EntityServiceHandler.UnAppendAsset(ctx, in, out)
}
