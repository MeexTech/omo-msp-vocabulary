// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/vocabulary/box.proto

package vocabulary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BoxService service

type BoxService interface {
	AddOne(ctx context.Context, in *ReqBoxAdd, opts ...client.CallOption) (*ReplyBoxInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyBoxInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetAll(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyBoxList, error)
	Update(ctx context.Context, in *ReqBoxUpdate, opts ...client.CallOption) (*ReplyBoxInfo, error)
	Appends(ctx context.Context, in *ReqBoxKeywords, opts ...client.CallOption) (*ReplyBoxInfo, error)
	Subtracts(ctx context.Context, in *ReqBoxKeywords, opts ...client.CallOption) (*ReplyBoxInfo, error)
}

type boxService struct {
	c    client.Client
	name string
}

func NewBoxService(name string, c client.Client) BoxService {
	return &boxService{
		c:    c,
		name: name,
	}
}

func (c *boxService) AddOne(ctx context.Context, in *ReqBoxAdd, opts ...client.CallOption) (*ReplyBoxInfo, error) {
	req := c.c.NewRequest(c.name, "BoxService.AddOne", in)
	out := new(ReplyBoxInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyBoxInfo, error) {
	req := c.c.NewRequest(c.name, "BoxService.GetOne", in)
	out := new(ReplyBoxInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "BoxService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxService) GetAll(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyBoxList, error) {
	req := c.c.NewRequest(c.name, "BoxService.GetAll", in)
	out := new(ReplyBoxList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxService) Update(ctx context.Context, in *ReqBoxUpdate, opts ...client.CallOption) (*ReplyBoxInfo, error) {
	req := c.c.NewRequest(c.name, "BoxService.Update", in)
	out := new(ReplyBoxInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxService) Appends(ctx context.Context, in *ReqBoxKeywords, opts ...client.CallOption) (*ReplyBoxInfo, error) {
	req := c.c.NewRequest(c.name, "BoxService.Appends", in)
	out := new(ReplyBoxInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boxService) Subtracts(ctx context.Context, in *ReqBoxKeywords, opts ...client.CallOption) (*ReplyBoxInfo, error) {
	req := c.c.NewRequest(c.name, "BoxService.Subtracts", in)
	out := new(ReplyBoxInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BoxService service

type BoxServiceHandler interface {
	AddOne(context.Context, *ReqBoxAdd, *ReplyBoxInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyBoxInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetAll(context.Context, *RequestInfo, *ReplyBoxList) error
	Update(context.Context, *ReqBoxUpdate, *ReplyBoxInfo) error
	Appends(context.Context, *ReqBoxKeywords, *ReplyBoxInfo) error
	Subtracts(context.Context, *ReqBoxKeywords, *ReplyBoxInfo) error
}

func RegisterBoxServiceHandler(s server.Server, hdlr BoxServiceHandler, opts ...server.HandlerOption) error {
	type boxService interface {
		AddOne(ctx context.Context, in *ReqBoxAdd, out *ReplyBoxInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyBoxInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetAll(ctx context.Context, in *RequestInfo, out *ReplyBoxList) error
		Update(ctx context.Context, in *ReqBoxUpdate, out *ReplyBoxInfo) error
		Appends(ctx context.Context, in *ReqBoxKeywords, out *ReplyBoxInfo) error
		Subtracts(ctx context.Context, in *ReqBoxKeywords, out *ReplyBoxInfo) error
	}
	type BoxService struct {
		boxService
	}
	h := &boxServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BoxService{h}, opts...))
}

type boxServiceHandler struct {
	BoxServiceHandler
}

func (h *boxServiceHandler) AddOne(ctx context.Context, in *ReqBoxAdd, out *ReplyBoxInfo) error {
	return h.BoxServiceHandler.AddOne(ctx, in, out)
}

func (h *boxServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyBoxInfo) error {
	return h.BoxServiceHandler.GetOne(ctx, in, out)
}

func (h *boxServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.BoxServiceHandler.RemoveOne(ctx, in, out)
}

func (h *boxServiceHandler) GetAll(ctx context.Context, in *RequestInfo, out *ReplyBoxList) error {
	return h.BoxServiceHandler.GetAll(ctx, in, out)
}

func (h *boxServiceHandler) Update(ctx context.Context, in *ReqBoxUpdate, out *ReplyBoxInfo) error {
	return h.BoxServiceHandler.Update(ctx, in, out)
}

func (h *boxServiceHandler) Appends(ctx context.Context, in *ReqBoxKeywords, out *ReplyBoxInfo) error {
	return h.BoxServiceHandler.Appends(ctx, in, out)
}

func (h *boxServiceHandler) Subtracts(ctx context.Context, in *ReqBoxKeywords, out *ReplyBoxInfo) error {
	return h.BoxServiceHandler.Subtracts(ctx, in, out)
}
