// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/vocabulary/relation.proto

package vocabulary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RelationService service

func NewRelationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RelationService service

type RelationService interface {
	AddOne(ctx context.Context, in *ReqRelationAdd, opts ...client.CallOption) (*ReplyRelationOne, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyRelationOne, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetAll(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyRelationList, error)
}

type relationService struct {
	c    client.Client
	name string
}

func NewRelationService(name string, c client.Client) RelationService {
	return &relationService{
		c:    c,
		name: name,
	}
}

func (c *relationService) AddOne(ctx context.Context, in *ReqRelationAdd, opts ...client.CallOption) (*ReplyRelationOne, error) {
	req := c.c.NewRequest(c.name, "RelationService.AddOne", in)
	out := new(ReplyRelationOne)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyRelationOne, error) {
	req := c.c.NewRequest(c.name, "RelationService.GetOne", in)
	out := new(ReplyRelationOne)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "RelationService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationService) GetAll(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyRelationList, error) {
	req := c.c.NewRequest(c.name, "RelationService.GetAll", in)
	out := new(ReplyRelationList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RelationService service

type RelationServiceHandler interface {
	AddOne(context.Context, *ReqRelationAdd, *ReplyRelationOne) error
	GetOne(context.Context, *RequestInfo, *ReplyRelationOne) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetAll(context.Context, *RequestInfo, *ReplyRelationList) error
}

func RegisterRelationServiceHandler(s server.Server, hdlr RelationServiceHandler, opts ...server.HandlerOption) error {
	type relationService interface {
		AddOne(ctx context.Context, in *ReqRelationAdd, out *ReplyRelationOne) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyRelationOne) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetAll(ctx context.Context, in *RequestInfo, out *ReplyRelationList) error
	}
	type RelationService struct {
		relationService
	}
	h := &relationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RelationService{h}, opts...))
}

type relationServiceHandler struct {
	RelationServiceHandler
}

func (h *relationServiceHandler) AddOne(ctx context.Context, in *ReqRelationAdd, out *ReplyRelationOne) error {
	return h.RelationServiceHandler.AddOne(ctx, in, out)
}

func (h *relationServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyRelationOne) error {
	return h.RelationServiceHandler.GetOne(ctx, in, out)
}

func (h *relationServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.RelationServiceHandler.RemoveOne(ctx, in, out)
}

func (h *relationServiceHandler) GetAll(ctx context.Context, in *RequestInfo, out *ReplyRelationList) error {
	return h.RelationServiceHandler.GetAll(ctx, in, out)
}
