// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/vocabulary/attribute.proto

package vocabulary

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AttributeService service

type AttributeService interface {
	AddOne(ctx context.Context, in *ReqAttributeAdd, opts ...client.CallOption) (*ReplyAttributeInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAttributeInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	All(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAttributeList, error)
	Update(ctx context.Context, in *ReqAttributeUpdate, opts ...client.CallOption) (*ReplyAttributeInfo, error)
}

type attributeService struct {
	c    client.Client
	name string
}

func NewAttributeService(name string, c client.Client) AttributeService {
	return &attributeService{
		c:    c,
		name: name,
	}
}

func (c *attributeService) AddOne(ctx context.Context, in *ReqAttributeAdd, opts ...client.CallOption) (*ReplyAttributeInfo, error) {
	req := c.c.NewRequest(c.name, "AttributeService.AddOne", in)
	out := new(ReplyAttributeInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAttributeInfo, error) {
	req := c.c.NewRequest(c.name, "AttributeService.GetOne", in)
	out := new(ReplyAttributeInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "AttributeService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeService) All(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAttributeList, error) {
	req := c.c.NewRequest(c.name, "AttributeService.All", in)
	out := new(ReplyAttributeList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attributeService) Update(ctx context.Context, in *ReqAttributeUpdate, opts ...client.CallOption) (*ReplyAttributeInfo, error) {
	req := c.c.NewRequest(c.name, "AttributeService.Update", in)
	out := new(ReplyAttributeInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AttributeService service

type AttributeServiceHandler interface {
	AddOne(context.Context, *ReqAttributeAdd, *ReplyAttributeInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyAttributeInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	All(context.Context, *RequestInfo, *ReplyAttributeList) error
	Update(context.Context, *ReqAttributeUpdate, *ReplyAttributeInfo) error
}

func RegisterAttributeServiceHandler(s server.Server, hdlr AttributeServiceHandler, opts ...server.HandlerOption) error {
	type attributeService interface {
		AddOne(ctx context.Context, in *ReqAttributeAdd, out *ReplyAttributeInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyAttributeInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		All(ctx context.Context, in *RequestInfo, out *ReplyAttributeList) error
		Update(ctx context.Context, in *ReqAttributeUpdate, out *ReplyAttributeInfo) error
	}
	type AttributeService struct {
		attributeService
	}
	h := &attributeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AttributeService{h}, opts...))
}

type attributeServiceHandler struct {
	AttributeServiceHandler
}

func (h *attributeServiceHandler) AddOne(ctx context.Context, in *ReqAttributeAdd, out *ReplyAttributeInfo) error {
	return h.AttributeServiceHandler.AddOne(ctx, in, out)
}

func (h *attributeServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyAttributeInfo) error {
	return h.AttributeServiceHandler.GetOne(ctx, in, out)
}

func (h *attributeServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.AttributeServiceHandler.RemoveOne(ctx, in, out)
}

func (h *attributeServiceHandler) All(ctx context.Context, in *RequestInfo, out *ReplyAttributeList) error {
	return h.AttributeServiceHandler.All(ctx, in, out)
}

func (h *attributeServiceHandler) Update(ctx context.Context, in *ReqAttributeUpdate, out *ReplyAttributeInfo) error {
	return h.AttributeServiceHandler.Update(ctx, in, out)
}
